name: SuperCAN
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build-win:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: windows-2019
    env:
      SOLUTION: Windows\supercan.sln
      MSBUILD_OPTIONS: -noLogo -m -t:Build -p:Configuration=Release
      ResourcesExtraDefines: SC_BUILD_NUMBER=$(GITHUB_RUN_NUMBER)
      VCVARS32: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat
      VCVARS64: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
      SC_BUILD_QT_PLUGIN: 0
      ARTIFACT_7z: supercan-win.7z
      ARTIFACT_INSTALLER: supercan_inst.exe


    steps:
      - uses: actions/checkout@v4
      - uses: microsoft/setup-msbuild@v1.1
      - name: Build
        id: build
        shell: cmd
        # run: appveyor\windows.cmd

        run: |
          set
          echo 1 >supercan-win.7z
          echo 2 >supercan_inst.exe

      - name: Generate hashes
        shell: bash
        id: hash
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "hashes=$(sha256sum $ARTIFACT_7z $ARTIFACT_INSTALLER | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            ${{env.ARTIFACT_7z}}
            ${{env.ARTIFACT_INSTALLER}}
          if-no-files-found: error

  build-firmware:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-latest
    env:
      APPVEYOR_BUILD_FOLDER: $(env.GITHUB_WORKSPACE)
      ARTIFACT_FIRMWARE: supercan-firmware.tar.xz

    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build

        # run: appveyor\windows.cmd

        run: |
          set
          echo 1 >supercan-firmware.tar.xz


      - name: Generate hashes
        shell: bash
        id: hash
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "hashes=$(sha256sum $ARTIFACT_FIRMWARE | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.ARTIFACT_FIRMWARE }}
          if-no-files-found: error

  collect:
    needs: [build-win, build-firmware]
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.sum.outputs.hashes }}
    steps:
      - name: Collect hashes
        id: sum
        run: |
          echo ${{needs.build-win.outputs.hashes}} | base64 -d >>${{ runner.temp }}/hashes
          echo ${{needs.build-firmware.outputs.hashes}} | base64 -d >>${{ runner.temp }}/hashes
          echo "hashes=$(cat ${{ runner.temp }}/hashes | base64 -w0)" >> "$GITHUB_OUTPUT"


  # provenance-win:
  #   # if: startsWith(github.ref, 'refs/tags/')
  #   needs: [build-win]
  #   permissions:
  #     actions: read
  #     id-token: write
  #     contents: write

  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
  #   with:
  #     base64-subjects: "${{ needs.build-win.outputs.hashes }}"
  #     # Upload provenance to a new release
  #     upload-assets: true
  #     provenance-name: windows.intoto.jsonl

  provenance:
    needs: [collect]
    permissions:
      actions: read
      id-token: write
      contents: write

    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.collect.outputs.hashes }}"
      # Upload provenance to a new release
      upload-assets: true
      provenance-name: supercan.intoto.jsonl

  # # This step calls the generic workflow to generate provenance.
  # provenance-latest:
  #   if: startsWith(github.ref, 'refs/heads/')
  #   needs: [build]
  #   permissions:
  #     actions: read
  #     id-token: write
  #     contents: write

  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
  #   with:
  #     base64-subjects: "${{ needs.build.outputs.hashes }}"
  #     # Upload provenance to a new release
  #     upload-assets: true
  #     upload-tag-name: latest-master
  #     provenance-name: windows.intoto.jsonl

  # # This step uploads our artifacts to the tagged GitHub release.
  # release:
  #   needs: [build, provenance-release]
  #   runs-on: ubuntu-latest
  #   # if: startsWith(github.ref, 'refs/tags/')
  #   steps:
  #     - name: Download supercan-win.7z
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: supercan-win.7z

  #     - name: Download supercan_inst.exe
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: supercan_inst.exe

  #     - name: Upload assets
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: |
  #           supercan-win.7z
  #           supercan_inst.exe

  # latest:
  #   needs: [build, provenance-latest]
  #   runs-on: ubuntu-latest
  #   # if: startsWith(github.ref, 'refs/heads/')
  #   steps:
  #     - name: Download supercan-win.7z
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: supercan-win.7z

  #     - name: Download supercan_inst.exe
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: supercan_inst.exe

  #     - name: Upload assets
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         # name: latest-master
  #         tag_name: latest-master
  #         files: |
  #           supercan-win.7z
  #           supercan_inst.exe

  latest:
    needs: [build-win, build-firmware, provenance]
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/heads/')
    steps:
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v3

      - name: Debugging
        run: |
          find ${{ steps.download.outputs.download-path }}

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest-master
          files: |
            ${{ steps.download.outputs.download-path }}/artifact/*
            ${{ steps.download.outputs.download-path }}/supercan.intoto.jsonl
          # if-no-files-found: error