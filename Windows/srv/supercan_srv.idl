/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2020 Jean Gressmann <jean@0x42.de>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */


import "oaidl.idl";
import "ocidl.idl";

[
	uuid(fd71338b-9533-4785-8c2f-664ece4bebee),
	version(1.0),
	helpstring("SuperCAN 1.0 Type Library"),
]
library SuperCAN
{
	importlib("stdole2.tlb");

	struct SuperCANRingBufferMapping
	{
		BSTR MemoryName;
		BSTR EventName;
		unsigned long Elements;
		unsigned long Bytes;
	};

	struct SuperCANBitTimingParams
	{
		unsigned short brp;
		unsigned short tseg1;
		byte tseg2;
		byte sjw;
	};

	struct SuperCANDeviceData
	{
		BSTR name;
		struct SuperCANBitTimingParams nm_min, nm_max, dt_min, dt_max;
		unsigned long can_clock_hz;
		unsigned short feat_perm;
		unsigned short feat_conf;
		byte fw_ver_major;
		byte fw_ver_minor;
		byte fw_ver_patch;
		byte sn_bytes[16];
		byte sn_length;
	};

	struct SuperCANDeviceData2
	{
		BSTR name;
		struct SuperCANBitTimingParams nm_min, nm_max, dt_min, dt_max;
		unsigned long can_clock_hz;
		unsigned short feat_perm;
		unsigned short feat_conf;
		byte fw_ver_major;
		byte fw_ver_minor;
		byte fw_ver_patch;
		byte sn_bytes[16];
		byte sn_length;
		byte ch_index;
	};

	struct SuperCANVersion
	{
		BSTR commit;
		unsigned short major;
		unsigned short minor;
		unsigned short patch;
		unsigned short build;
	};

	[
		object,
		uuid(434A1140-50D8-4C49-AB8F-9FD1A7327CE0),
		pointer_default(unique),
		oleautomation,
	]
	interface ISuperCANDevice : IUnknown
	{
		HRESULT AcquireConfigurationAccess(
			[out] boolean* config_access,
			[out] unsigned long* timeout_ms);
		HRESULT ReleaseConfigurationAccess();
		HRESULT GetRingBufferMappings(
			[out] struct SuperCANRingBufferMapping* rx,
			[out] struct SuperCANRingBufferMapping* tx);
		HRESULT GetDeviceData([out] struct SuperCANDeviceData* data);

		HRESULT SetBus([in] boolean on);
		HRESULT SetFeatureFlags([in] unsigned long flags);
		HRESULT SetNominalBitTiming([in] struct SuperCANBitTimingParams param);
		HRESULT SetDataBitTiming([in] struct SuperCANBitTimingParams param);
	};

	[
		object,
		uuid(4CF5E694-1111-4719-B6CB-A9B88985E97A),
		pointer_default(unique),
		oleautomation,
	]
	interface ISuperCANDevice2 : ISuperCANDevice
	{
		HRESULT SetLogLevel(int level);
	};

	[
		object,
		uuid(FA2FAA9D-960D-49BF-8261-1F07BD0C9D69),
		pointer_default(unique),
		oleautomation,
	]
	interface ISuperCANDevice3 : ISuperCANDevice2
	{
		HRESULT GetDeviceData2([out] struct SuperCANDeviceData2* data);
	};

	[
		object, // The [object] interface attribute identifies a COM interface. else DCE RPC
		uuid(8F8C4375-2DFE-4335-8947-036F965BD927),
		pointer_default(unique),
		oleautomation, // either this or 'dual' are required for COM
	]
	interface ISuperCAN : IUnknown
	{
		HRESULT DeviceScan([out] unsigned long* count);
		HRESULT DeviceGetCount([out] unsigned long* count);
		HRESULT DeviceOpen(
			[in] unsigned long index,
			[out] ISuperCANDevice** dev);
	};

	[
		object, // The [object] interface attribute identifies a COM interface. else DCE RPC
		uuid(DA4C7005-6D21-4AB7-9933-5EAA959F0621),
		pointer_default(unique),
		oleautomation, // either this or 'dual' are required for COM
	]
	interface ISuperCAN2 : ISuperCAN
	{
		HRESULT GetVersion(struct SuperCANVersion* version);
		HRESULT SetLogLevel(int level);
	};

	[
		uuid(E6214AB1-56AD-4215-8688-095D3816F260),
		helpstring("SuperCAN class"),
	]
	coclass CSuperCAN
	{
		[default] interface ISuperCAN;
	};
};
